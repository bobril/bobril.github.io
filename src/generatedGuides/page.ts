  
    import * as b from 'bobril';
    import * as viewportUtils from '../utils/viewport';
    
    export function create() {
        return {
            tag : 'div',
            attrs: {
                class: 'markdown-body'
            },
            children: [
                {
                    tag: 'div',
                    attrs: {id:'menu'},
                    children: [
                        {
                            tag: 'div',
                            children: ['CONTENT'],
                            style: {
                                textAlign: 'center',
                                fontSize: '16px',
                                marginBottom: 40,
                                marginTop: 40,
                                fontWeight: 'bold',
                            }
                        },
                        
            {
                tag: 'div',
                className: 'menu-block',
                style : {
                    paddingLeft: 24
                },
                component: {
                    init: (ctx) => {
                        ctx.activeMenuAnchor =  "menu-guides";
                    },
                    
                    postInitDom(ctx) {
                        const menuAnchors = ["menu-guides","menu-getting-started","menu-bobflux","menu-localizations","menu-routing","menu-bobril-build","menu-bobx"];
                        const menuAnchorsBoundary = viewportUtils.getBoundariesForHtmlElements(menuAnchors);
                
                        function findActiveAnchor() {
                            ctx.activeMenuAnchor = menuAnchors[menuAnchorsBoundary.findIndex((boundary) =>
                                 viewportUtils.isInBoundaries(b.getWindowScroll()[1] + 75, boundary)
                            )];
                            b.invalidate(ctx);
                        }
                            
                        b.addOnScroll(() => {
                            findActiveAnchor();
                        });
                        
                        findActiveAnchor();
                    },
                    
                    render(ctx, me) {
                       const activeAnchor = ctx.activeMenuAnchor;
                       
                       me.children = [
                            
        {
            tag: 'div',
            children:  {
                tag: 'div',
                className: "menu-block-header",
                children: 'Guides',
                style: {
                    textDecoration: 'none',
                    display: 'list-item',
                    fontSize: '15px',
                    cursor: 'pointer'
                }, 
                component: {
                    onClick: () => {
                        let e = document.getElementById('menu-guides');
                        
                        if (e === undefined || e === null) {
                            console.warn('Cannot find element with id:', 'menu-guides');
                            return;
                        }
                        
                        let offsetTop = e.offsetTop - 70; // Header compensation + 10px;
                        window.scrollTo(0, offsetTop);
                    }
                }
            },
            style: {
                color: activeAnchor === "menu-guides" ? '#ffffff' : 'rgb(148, 154, 169)',
                width: '150px',
                margin: 'auto',
                marginBottom: 13,
                textTransform: 'uppercase',
                marginLeft: 20,
                listStyle:  'none',
                lineHeight: '18px'
            }
        }
    ,
                            {
                                tag: 'div',
                                className: 'menu-sub-block',
                                style: {
                                    paddingLeft: 24
                                },
                                children: [
                                    
        {
            tag: 'div',
            children:  {
                tag: 'div',
                className: 'menu-sub-block-item',
                children: 'Getting Started',
                style: {
                    textDecoration: 'none',
                    display: 'list-item',
                    fontSize: '15px',
                    cursor: 'pointer'
                }, 
                component: {
                    onClick: () => {
                        let e = document.getElementById('menu-getting-started');
                        
                        if (e === undefined || e === null) {
                            console.warn('Cannot find element with id:', 'menu-getting-started');
                            return;
                        }
                        
                        let offsetTop = e.offsetTop - 70; // Header compensation + 10px;
                        window.scrollTo(0, offsetTop);
                    }
                }
            },
            style: {
                color: activeAnchor === "menu-getting-started" ? '#ffffff' : '#949aa9',
                width: '150px',
                margin: 'auto',
                marginBottom: 13,
                textTransform: 'false',
                marginLeft: false,
                listStyle:  'disc',
                lineHeight: '15px'
            }
        }
    ,
        {
            tag: 'div',
            children:  {
                tag: 'div',
                className: 'menu-sub-block-item',
                children: 'Bobflux',
                style: {
                    textDecoration: 'none',
                    display: 'list-item',
                    fontSize: '15px',
                    cursor: 'pointer'
                }, 
                component: {
                    onClick: () => {
                        let e = document.getElementById('menu-bobflux');
                        
                        if (e === undefined || e === null) {
                            console.warn('Cannot find element with id:', 'menu-bobflux');
                            return;
                        }
                        
                        let offsetTop = e.offsetTop - 70; // Header compensation + 10px;
                        window.scrollTo(0, offsetTop);
                    }
                }
            },
            style: {
                color: activeAnchor === "menu-bobflux" ? '#ffffff' : '#949aa9',
                width: '150px',
                margin: 'auto',
                marginBottom: 13,
                textTransform: 'false',
                marginLeft: false,
                listStyle:  'disc',
                lineHeight: '15px'
            }
        }
    ,
        {
            tag: 'div',
            children:  {
                tag: 'div',
                className: 'menu-sub-block-item',
                children: 'Localizations',
                style: {
                    textDecoration: 'none',
                    display: 'list-item',
                    fontSize: '15px',
                    cursor: 'pointer'
                }, 
                component: {
                    onClick: () => {
                        let e = document.getElementById('menu-localizations');
                        
                        if (e === undefined || e === null) {
                            console.warn('Cannot find element with id:', 'menu-localizations');
                            return;
                        }
                        
                        let offsetTop = e.offsetTop - 70; // Header compensation + 10px;
                        window.scrollTo(0, offsetTop);
                    }
                }
            },
            style: {
                color: activeAnchor === "menu-localizations" ? '#ffffff' : '#949aa9',
                width: '150px',
                margin: 'auto',
                marginBottom: 13,
                textTransform: 'false',
                marginLeft: false,
                listStyle:  'disc',
                lineHeight: '15px'
            }
        }
    ,
        {
            tag: 'div',
            children:  {
                tag: 'div',
                className: 'menu-sub-block-item',
                children: 'Routing',
                style: {
                    textDecoration: 'none',
                    display: 'list-item',
                    fontSize: '15px',
                    cursor: 'pointer'
                }, 
                component: {
                    onClick: () => {
                        let e = document.getElementById('menu-routing');
                        
                        if (e === undefined || e === null) {
                            console.warn('Cannot find element with id:', 'menu-routing');
                            return;
                        }
                        
                        let offsetTop = e.offsetTop - 70; // Header compensation + 10px;
                        window.scrollTo(0, offsetTop);
                    }
                }
            },
            style: {
                color: activeAnchor === "menu-routing" ? '#ffffff' : '#949aa9',
                width: '150px',
                margin: 'auto',
                marginBottom: 13,
                textTransform: 'false',
                marginLeft: false,
                listStyle:  'disc',
                lineHeight: '15px'
            }
        }
    ,
        {
            tag: 'div',
            children:  {
                tag: 'div',
                className: 'menu-sub-block-item',
                children: 'Bobril Build',
                style: {
                    textDecoration: 'none',
                    display: 'list-item',
                    fontSize: '15px',
                    cursor: 'pointer'
                }, 
                component: {
                    onClick: () => {
                        let e = document.getElementById('menu-bobril-build');
                        
                        if (e === undefined || e === null) {
                            console.warn('Cannot find element with id:', 'menu-bobril-build');
                            return;
                        }
                        
                        let offsetTop = e.offsetTop - 70; // Header compensation + 10px;
                        window.scrollTo(0, offsetTop);
                    }
                }
            },
            style: {
                color: activeAnchor === "menu-bobril-build" ? '#ffffff' : '#949aa9',
                width: '150px',
                margin: 'auto',
                marginBottom: 13,
                textTransform: 'false',
                marginLeft: false,
                listStyle:  'disc',
                lineHeight: '15px'
            }
        }
    ,
        {
            tag: 'div',
            children:  {
                tag: 'div',
                className: 'menu-sub-block-item',
                children: 'BobX',
                style: {
                    textDecoration: 'none',
                    display: 'list-item',
                    fontSize: '15px',
                    cursor: 'pointer'
                }, 
                component: {
                    onClick: () => {
                        let e = document.getElementById('menu-bobx');
                        
                        if (e === undefined || e === null) {
                            console.warn('Cannot find element with id:', 'menu-bobx');
                            return;
                        }
                        
                        let offsetTop = e.offsetTop - 70; // Header compensation + 10px;
                        window.scrollTo(0, offsetTop);
                    }
                }
            },
            style: {
                color: activeAnchor === "menu-bobx" ? '#ffffff' : '#949aa9',
                width: '150px',
                margin: 'auto',
                marginBottom: 13,
                textTransform: 'false',
                marginLeft: false,
                listStyle:  'disc',
                lineHeight: '15px'
            }
        }
    
                                ]
                            }
                        ] 
                    }                   
                }
            }
                    ],
                    style: {
                        position: 'fixed',
                        top: 90,
                        right: 30,
                        bottom: 30,
                        background: '#4c5060',
                        overflow: 'auto',
                        width: 240,
                        height: 'calc(100vh - 120px)',
                     }
                },
                {
                    tag: 'div',
                    children: [{"tag":"div","children":[{"tag":"/","children":"<div id='menu-guides' style='font-size: 34px; font-weight:600; color: #ececed; letter-spacing: 2.5px; padding-bottom: 10px'>GUIDES</div>"}]},{"tag":"div","children":[{"tag":"/","children":"<h2 id=\"menu-getting-started\">Getting Started</h2>\n[//]: # \"bobrilComIgnoreStart\""},{"tag":"h1","children":["Bobril - Getting Started"]},{"tag":"div"},{"tag":"p","children":[{"tag":"b","children":[{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleBasic","title":""},"children":["Download sample"]}]}]},{"tag":"div"},{"tag":"h3","children":["Introduction"]},{"tag":"p","children":["In this article, we will learn the basics about bobril and create a simple application with one component. Then, we will take a look at how to setup the project simply by the npm."]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["Bobril - I - Getting Started"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/02_bobril-bobflux.md","title":""},"children":["Bobril - II - Bobflux Application Architecture"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/03_bobril-localizations.md","title":""},"children":["Bobril - III - Localizations and Formatting"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/04_bobril-routing.md","title":""},"children":["Bobril - IV - Routing"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/05_bobril-bobril-build.md","title":""},"children":["Bobril - V - Bobril-build"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/06_bobril-bobx.md","title":""},"children":["Bobril - VI - BobX Application Store Management"]}]}]}]},{"tag":"div"},{"tag":"h3","children":["Background"]},{"tag":"p","children":["Bobril is a component-oriented framework inspired by React and Mithril. It combines advantages from both of them. It is ",{"tag":"b","children":["fast, low size"]}," framework with rendering based on Virtual DOM. The main focus is on speed and simplicity of code generation. Bobril is about 8x faster than react (see ",{"tag":"a","attrs":{"href":"http://vdom-benchmark.github.io/vdom-benchmark/","title":""},"children":["vdom-benchmark"]},")."]},{"tag":"p","children":["Content and behavior of any page can be defined simply by composing JavaScript objects."]},{"tag":"p","children":["The page content rendering is based on comparison of Virtual DOMs. The application has some state in time and bobril application generates the Virtual DOM according to this state. Virtual DOM is an object representation of the resultant DOM. If some state-changing event occurs and the previous Virtual DOM is different than currently generated Virtual DOM, the real DOM will change according to this change."]},{"tag":"p","children":["Bobril is written by Boris Letocha (software architect and developer in GMC Software Technology)."]},{"tag":"blockquote","children":[{"tag":"p","children":["Quote: Boris Letocha, author of the framework"]},{"tag":"p","children":["Besides size and speed benefits, bobril has some very useful features which you will not find elsewhere. For example transparent emulation pointer-events:none or user-select:none in all browsers down to IE9. Transparent unification of mouse and touch events across all supported browsers including Chrome, IE10, IE11. Another feature I call it \"Virtual CSS\" - you can define styles in JS and it will transparently build optimal CSS in runtime. Image spriting. Image recoloring. Tight integration with TypeScript. Bobril-build enhancing your code during compile time, does optimal bundling similar to Rollup. Bobril removed some of limitations of React like component root does not need to be just one element. Directly includes Router and Drag and drop features. And much much more."]}]},{"tag":"p","children":["You can find more detailed information and examples ",{"tag":"a","attrs":{"href":"https://github.com/Bobris/Bobril","title":""},"children":["here."]}]},{"tag":"h3","children":["How to Start"]},{"tag":"p","children":["Let's start with a simple TypeScript (typed JavaScript) example - traditional Hello World."]},{"tag":"h4","children":["Installing Build System"]},{"tag":"p","children":["The easiest way is to use directly the prepared build system bobril-build, which contains optimized functionality for building ",{"tag":"emphasis","children":["bobril"]}," based applications, testing, translations, etc. Bobril-build requires node.js >= 8.x.x and npm >=5.x.x. To install bobril build, pass the following command to the command line:"]},{"tag":"pre","children":{"tag":"code","className":"bash","children":"npm i bobril-build -g"}},{"tag":"/","children":"<!---\nWe also recommend to install the _tslint_ bobril-build plugin which generates _tslint.json_ file for the project:\n``` bash\nnpm i typescript tslint -g\nbb plugins -i bb-tslint-plugin\n```\nTSLint checks your TypeScript code for readability, maintainability, and functionality errors.\n--->"},{"tag":"p","children":["Now we can start with creating the project. So create some folder, e.g. ",{"tag":"emphasis","children":["sample1"]},", create an empty file ",{"tag":"emphasis","children":["index.ts"]}," in this folder and pass the following commands in its root:"]},{"tag":"pre","children":{"tag":"code","className":"bash","children":"npm init\nnpm i bobril --save\nbb"}},{"tag":"p","children":["These commands will:"]},{"tag":"ol","children":[{"tag":"li","children":[{"tag":"p","children":["Initialize project as npm package. You can hit Enter for all questions."]}]},{"tag":"li","children":[{"tag":"p","children":["Install the bobril dependency"]}]},{"tag":"li","children":[{"tag":"p","children":["Run bobril-build"]}]}]},{"tag":"p","children":["Now the bobril-build runs in the interactive mode, which means it watches your code for changes, builds the application to the memory file system and serves it on the address ",{"tag":"a","attrs":{"href":"http://localhost:8080/","title":""},"children":["http://localhost:8080"]},"."]},{"tag":"p","children":["The built application has resolved all dependencies, created the ",{"tag":"emphasis","children":["index.html"]},", source maps for debugging and much more stuff you usually have to do manually in another frameworks."]},{"tag":"h4","children":["Let's Write a Code"]},{"tag":"p","children":["For this purpose, we recommend to use the Visual Studio Code with installed tslint and bobril plugins. Bobril-build is optimized for this editor and contains its own bobril extension with snippets and analysis tools."]},{"tag":"p","children":["So, open the ",{"tag":"emphasis","children":["sample1"]}," folder in editor and change ",{"tag":"emphasis","children":["index.ts"]}," to look like the following:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\n\nb.init(() => {\n  return { tag: \"h1\", children: \"Hello World!\" };\n});"}},{"tag":"p","children":["The b imported from the bobril package represents the bobril world with all its available basic functions. The init function initializes the application with function returning the Virtual DOM. In the example is the Virtual DOM represented with the only one node -"]},{"tag":"p","children":["IBobrilNode - of tag ",{"tag":"emphasis","children":["'h1'"]}," with content ",{"tag":"emphasis","children":["'Hello World'"]},"."]},{"tag":"p","children":["Yes, it is that simple. Except the string, the children property can be assigned with another IBobrilNode or with an array of IBobrilNode, so we can compose the whole tree of the DOM."]},{"tag":"p","children":["Now take a look to the ",{"tag":"a","attrs":{"href":"http://localhost:8080/","title":""},"children":["http://localhost:8080"]}," address in your browser. You can see your first application written with bobril!"]},{"tag":"h4","children":["Components"]},{"tag":"p","children":["Bobril is a framework focusing on components and for Virtual DOM composition we can define easy-to-use components. Let's prepare a ",{"tag":"b","children":["button"]}," component."]},{"tag":"p","children":["Add a new file ",{"tag":"emphasis","children":["button.ts"]}," with the following content:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\n\nexport interface IButtonData {\n  title: string;\n  onClick?: () => void;\n}\n\ninterface IButtonCtx extends b.IBobrilCtx {\n  data: IButtonData;\n}\n\nexport const button =\n  b.createComponent <\n  IButtonData >\n  {\n    render(ctx: IButtonCtx, me: b.IBobrilNode) {\n      me.tag = \"button\";\n      me.children = ctx.data.title;\n    },\n    onClick(ctx: IButtonCtx): boolean {\n      if (ctx.data.onClick) {\n        ctx.data.onClick();\n      }\n\n      return true;\n    }\n  };\n\nexport default button;"}},{"tag":"p","children":["The b.createComponent function accepts an object defining the behavior of component in its life cycle. This life cycle defining functions like init, render, postRender etc. are defined by interface IBobrilComponent. The description of each function can be found in comments of ",{"tag":"emphasis","children":["bobril"]}," in its ",{"tag":"emphasis","children":["index.ts"]}," file. Our button uses the render and onClick functions which accept the ctx (context) as a first parameter."]},{"tag":"p","children":["Context is a storage for the current state of the specific component instance, e.g. for each specific button - the specific node in Virtual DOM."]},{"tag":"p","children":["The context interface IButtonCtx extending the IBobrilCtx has predefined member data which is automatically assigned by bobril in Virtual DOM tree rendering. It is prepared to be used with own IButtonData interface definition."]},{"tag":"p","children":["This data member is designed to be used as an input information for a component. It can define how the component should look like and behave. So the button in the example has title and onClick callback defined from the outside."]},{"tag":"p","children":["The data onClick callback is called in the onClick life cycle function defined again by the IBobrilComponent interface."]},{"tag":"p","children":["Now the button component is ready to be used in ",{"tag":"emphasis","children":["index.ts"]}," so we can change it to look like the following:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport { button } from \"./button\";\n\nb.init(() => {\n  return [\n    { tag: \"h1\", children: \"Hello World!\" },\n    button({\n      title: \"Click Me!\",\n      onClick: () => alert(\"Yeah! I was clicked!\")\n    })\n  ];\n});"}},{"tag":"p","children":["After automatic recompile, you can open this page and see how the ",{"tag":"b","children":["bobril"]}," is working."]},{"tag":"p","children":["The classic import with alias can be used as well:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as btn from \"./button\";"}},{"tag":"h4","children":["Bring It to Life"]},{"tag":"p","children":["If we need to make some operations (e.g. as a reaction on some backend event), change the state and tell bobril that the re-render of Virtual DOM is needed, we can simply call the b.invalidate() function and the bobril re-calls the function provided to the b.init function. To try it, we can simply change the code:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport { button } from \"./button\";\n\nlet counter = 0;\n\nb.init(() => {\n  setTimeout(() => {\n    counter++;\n    b.invalidate();\n  }, 1000);\n\n  return [\n    { tag: \"h1\", children: \"Hello World!\" },\n    button({\n      title: \"Click Me!\",\n      onClick: () => alert(\"Yeah! I was clicked!\")\n    }),\n    { tag: \"p\", children: counter.toString() }\n  ];\n});"}},{"tag":"p","children":["It adds a new element with a counter increasing every 1000 ms. If you need to call b.invalidate inside of some component, use it with ctx as a parameter, so b.invalidate(ctx). It will perform rendering of the specific component only."]},{"tag":"p","children":["Bobril contains lots of other really useful functions like styleDef to define styles as objects and prepare them for use by style function. Other useful functions are routes and route to define routing between pages in application, etc."]},{"tag":"h3","children":["Notes"]},{"tag":"p","children":["To build, minify and bundle your application to ",{"tag":"emphasis","children":["dist"]}," folder, just type the command:"]},{"tag":"pre","children":{"tag":"code","className":"bash","children":"bb b"}},{"tag":"p","children":["For more information about bobril and bobril-build, please visit the github pages below:"]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/Bobris/Bobril","title":""},"children":["https://github.com/Bobris/Bobril"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/bobril/bbcore","title":""},"children":["https://github.com/bobril/bbcore"]}]}]}]}]},{"tag":"div","children":[{"tag":"/","children":"<h2 id=\"menu-bobflux\">Bobflux</h2>"},{"tag":"div"},{"tag":"h1","children":["Bobflux"]},{"tag":"div"},{"tag":"p","children":[{"tag":"b","children":[{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppBobflux","title":""},"children":["Download sample"]}]}]},{"tag":"div"},{"tag":"h3","children":["Introduction"]},{"tag":"p","children":["In the ",{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["previous article"]},", we have learned about how to create a page (view part of a web application) by bobril. In this article, we will learn how to add an application logic by ",{"tag":"b","children":["bobflux"]},"."]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["Bobril - I - Getting Started"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/02_bobril-bobflux.md","title":""},"children":["Bobril - II - Bobflux Application Architecture"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/03_bobril-localizations.md","title":""},"children":["Bobril - III - Localizations and Formatting"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/04_bobril-routing.md","title":""},"children":["Bobril - IV - Routing"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/05_bobril-bobril-build.md","title":""},"children":["Bobril - V - Bobril-build"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/06_bobril-bobx.md","title":""},"children":["Bobril - VI - BobX Application Store Management"]}]}]}]},{"tag":"div"},{"tag":"h3","children":["Background"]},{"tag":"p","children":["Bobflux is a pure functional frontend application architecture based on ",{"tag":"emphasis","children":["flux"]}," and inspired by ",{"tag":"emphasis","children":["reflux"]}," and ",{"tag":"emphasis","children":["redux"]},". It is written by Karel Steinmetz (software developer in GMC Software Technology). The bobflux lifecycle can be described by the following picture:"]},{"tag":"pre","children":{"tag":"code","className":"","children":"1. Application has some state\n2. View is rendered according to this state\n3. View calls actions with handlers created by action creator\n4. Actions change the state"}},{"tag":"p","children":["For more information, see ",{"tag":"a","attrs":{"href":"https://github.com/karelsteinmetz/bobflux/","title":""},"children":["project pages"]},".\n",{"tag":"img","attrs":{"src":"./images/bobflux.png","title":"","alt":""}}]},{"tag":"h3","children":["Let's start"]},{"tag":"p","children":["We will create a simple TODO application. At first, we need to have prepared ",{"tag":"emphasis","children":["bobril-build"]}," on computer. Follow the steps in ",{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["previous article"]}," to perform bobril-build installation."]},{"tag":"p","children":["Now you can start a new project again or use a predefined skeleton simpleApp from ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/Bobris/bobril-build/tree/master/examples/simpleApp","title":""},"children":["bobril-build github repository"]},". Following example will use it. To get final code ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppBobflux","title":""},"children":["download the full sample"]},"."]},{"tag":"h3","children":["Add bobflux to Application"]},{"tag":"p","children":["Run following commands in the root of application folder:"]},{"tag":"pre","children":{"tag":"code","className":"bash","children":"npm i\nnpm i bobflux --save\nbb"}},{"tag":"h3","children":["State"]},{"tag":"p","children":["At first, we need to prepare application ",{"tag":"b","children":["state"]},", its ",{"tag":"b","children":["cursor"]}," and function for creating the default state. To define the state, add file ",{"tag":"emphasis","children":["src/state.ts"]}," with the following content:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as flux from \"bobflux\";\n\nexport interface ITodoAppState extends flux.IState {\n  todos: string[];\n  todoName: string;\n}\n\nexport const todoAppCursor: flux.ICursor<ITodoAppState> = {\n  key: \"\"\n};\n\nexport function createDefaultTodoAppState(): ITodoAppState {\n  return {\n    todos: [],\n    todoName: \"\"\n  };\n}"}},{"tag":"p","children":[{"tag":"b","children":["State"]}," is a place where to store application data. The difference between a state and a context is that context stores the data needed only for a component itself and the rest of an application doesn't care about them. It is e.g. an information whether a component for section is collapsed or not (when you don't need to manage it from the outside)."]},{"tag":"p","children":["In our todo application, we will need to store the list of todos and currently written name of todo so we have to define ITodoAppState for these data."]},{"tag":"p","children":[{"tag":"b","children":["Cursor"]}," defines a path (key) to the state in an aplication state. In our sample, we will work only with the root application cursor so the path in todoAppCursor.key is empty. In real application it is recommended to define as much specific cursors as possible to get the best bobflux performance advantages. It means e.g. to create cursor like:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"export const todoNameCursor: flux.ICursor<string> = {\n  key: \"todoName\"\n};"}},{"tag":"p","children":["For the simplicity our example uses only the root todoAppCursor. Now, we need to initialize bobflux and provide the application state to it, so change ",{"tag":"emphasis","children":["src/app.ts"]}," to looks like following:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport * as flux from \"bobflux\";\nimport * as monitor from \"bobflux-monitor\";\nimport * as todoState from \"./state\";\nimport { mainPage } from \"./mainPage\";\n\nflux.bootstrap(todoState.createDefaultTodoAppState(), {\n  debugCallback: monitor.init()\n});\n\nb.routes(b.route({ handler: mainPage }));"}},{"tag":"p","children":["Now, we have prepared the application state that can be modified by calling actions. Actions change the state by a handler on a specific sub-state defined by the cursor. In our todo example, we will need to perform two actions:"]},{"tag":"pre","children":{"tag":"code","className":"","children":"1. Change the current name of todo according to a textbox value\n2. Add the written todo to the list of todos"}},{"tag":"p","children":["So we will add the file ",{"tag":"emphasis","children":["src/actions/changeTodoName.ts"]},":"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as flux from \"bobflux\";\nimport { ITodoAppState, todoAppCursor } from \"../state\";\n\nexport const changeTodoName = flux.createAction(\n  todoAppCursor,\n  (state: ITodoAppState, todoName: string): ITodoAppState => {\n    if (todoName === state.todoName) return state;\n\n    return flux.shallowCopy(state, copy => {\n      copy.todoName = todoName;\n    });\n  }\n);\n\nexport default changeTodoName;"}},{"tag":"p","children":["and ",{"tag":"emphasis","children":["src/actions/addTodo.ts"]},":"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as flux from \"bobflux\";\nimport { todoAppCursor } from \"../state\";\n\nexport const addTodo = flux.createParamLessAction(todoAppCursor, state => {\n  if (!state.todoName || state.todoName.trim().length === 0) return state;\n\n  return flux.shallowCopy(state, copy => {\n    copy.todos = [...state.todos, state.todoName];\n    copy.todoName = \"\";\n  });\n});\n\nexport default addTodo;"}},{"tag":"p","children":["The changeTodoName action is defined by the function createAction from bobflux which accepts the cursor of a state which it will change and the handler which will be used for the change. In the beginning of the handler is a check whether we want to change something or not."]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":["If not, then we will return the original instance of the state."]}]},{"tag":"li","children":[{"tag":"p","children":["If yes, then we will create a shallow copy of the state and return the modified copy."]}]}]},{"tag":"p","children":["Bobflux follows the principles of ",{"tag":"b","children":["immutability"]}," to keep the best performance. It compares an input state with an output state and if it is different, then it calls b.invalidate to re-render the view. It is necessary to take care about the copied object properties. If there is some referential object like an array todos in the addTodo action, it has to be copied as well. Composing the Page with bobflux now, we have everything prepared to be used on the page of the todo application. So let's change the ",{"tag":"emphasis","children":["src/mainPage.ts"]}," to look like this:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport * as flux from \"bobflux\";\nimport { todoAppCursor } from \"./state\";\nimport { changeTodoName } from \"./actions/changeTodoName\";\nimport { addTodo } from \"./actions/addTodo\";\nimport { button } from \"./components/button\";\nimport { textbox } from \"./components/textbox\";\nimport { p } from \"./components/paragraph\";\nimport { h1 } from \"./components/header\";\n\nexport const mainPage = b.createComponent({\n  render(_ctx: b.IBobrilCtx, me: b.IBobrilNode): void {\n    const state = flux.getState(todoAppCursor);\n    me.children = [\n      h1({}, \"TODO\"),\n      p({}, [\n        textbox({\n          value: state.todoName,\n          onChange: newValue => changeTodoName(newValue)\n        }),\n        button({ title: \"ADD\", onClick: () => addTodo() })\n      ]),\n      state.todos.map(item => p({}, item)),\n      p({}, `Count: ${state.todos.length}`)\n    ];\n  }\n});\n\nexport default mainPage;"}},{"tag":"p","children":["The components definition is not the subject of this article, so you can use definitions in the attached source code."]},{"tag":"p","children":["You can see that a page resolves the current application state by the function getState with defined todoAppCursor. It can be done this way because bobflux initiates rendering of the page on every change in the state.\nThe textbox and button components use the defined actions in their onChange and onClick callbacks so the user interactions from view initiates the action calls."]},{"tag":"p","children":["And finally in the end of the render function is a mapped array of todos to 'p' tags with todo names."]},{"tag":"p","children":["Now, we are able to open the application in a browser and see how it works. Yes, it is really that simple."]},{"tag":"p","children":["To debug the state history, you can also try the bobflux-monitor (see the ",{"tag":"a","attrs":{"href":"https://github.com/keeema/bobflux-monitor","title":""},"children":["project pages"]}," or the sample)."]},{"tag":"p","children":["Bobflux also contains few performance helpers like createRouteComponent to optimize rendering of component or provident the state in context etc."]},{"tag":"p","children":["To get more information see the project github pages: ",{"tag":"a","attrs":{"href":"https://github.com/karelsteinmetz/bobflux","title":""},"children":["https://github.com/karelsteinmetz/bobflux"]}]}]},{"tag":"div","children":[{"tag":"/","children":"<h2 id=\"menu-localizations\">Localizations</h2>\n[//]: # \"bobrilComIgnoreStart\""},{"tag":"h1","children":["Bobril - Localizations and Formatting"]},{"tag":"div"},{"tag":"p","children":[{"tag":"b","children":[{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppGlobalization","title":""},"children":["Download sample"]}]}]},{"tag":"div"},{"tag":"h3","children":["Introduction"]},{"tag":"p","children":["In this article, we will learn how to localize our application or format a text with culture specifics. The library ",{"tag":"b","children":["bobril-g11n"]}," was created for this purpose."]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["Bobril - I - Getting Started"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/02_bobril-bobflux.md","title":""},"children":["Bobril - II - Bobflux Application Architecture"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/03_bobril-localizations.md","title":""},"children":["Bobril - III - Localizations and Formatting"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/04_bobril-routing.md","title":""},"children":["Bobril - IV - Routing"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/05_bobril-bobril-build.md","title":""},"children":["Bobril - V - Bobril-build"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/06_bobril-bobx.md","title":""},"children":["Bobril - VI - BobX Application Store Management"]}]}]}]},{"tag":"div"},{"tag":"h3","children":["Background"]},{"tag":"p","children":["Bobril globalization library is written by Boris Letocha (software architect and developer in GMC Software Technology)."]},{"tag":"p","children":["It is inspired by Format.js and internally uses Moment.js."]},{"tag":"h3","children":["Examples"]},{"tag":"p","children":["At first, we need to have prepared ",{"tag":"emphasis","children":["bobril-build"]}," on computer. Follow the steps in ",{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["first article"]}," to perform bobril-build installation."]},{"tag":"p","children":["Now you can start a new project again or use a predefined skeleton simpleApp from ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/Bobris/bobril-build/tree/master/examples/simpleApp","title":""},"children":["bobril-build github repository"]},"."]},{"tag":"p","children":["Following example will use it. To get final code ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppGlobalization","title":""},"children":["download the full sample"]},"."]},{"tag":"h3","children":["Add bobril-g11n to Application"]},{"tag":"p","children":["Type to the command line:"]},{"tag":"pre","children":{"tag":"code","className":"bash","children":"npm i bobril-g11n --save\nbb"}},{"tag":"p","children":["Now change the ",{"tag":"emphasis","children":["app.ts"]}," file and change it to look like this:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport { mainPage } from \"./mainPage\";\nimport { initGlobalization } from \"bobril-g11n\";\n\ninitGlobalization({ defaultLocale: \"en-US\" }).then(() => {\n  b.routes(b.route({ handler: mainPage }));\n});"}},{"tag":"p","children":["This code will import and call initGlobalization function. Its argument IG11NConfig defines the default locale and optionally the function for getting the path to the localized files."]},{"tag":"p","children":["Bobril-build is configured to generate the default localization file ",{"tag":"emphasis","children":["en-US.js"]}," directly to the root of the ",{"tag":"emphasis","children":["dist"]}," folder."]},{"tag":"p","children":["The initGlobalization function returns a Promise object. Initialization of the application by b.routes has to be called in a fulfillment callback of this promise."]},{"tag":"p","children":["The next step is to import all necessary functions for example by adding the following lines to the ",{"tag":"emphasis","children":["mainPage.ts"]}," file:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import { t, f, getLocale, setLocale } from \"bobril-g11n\";"}},{"tag":"p","children":["Now, we have everything prepared for trying out the examples. You can remove the me.children content in a render function of the page component in ",{"tag":"emphasis","children":["mainPage.ts"]}," file and use it for trying out the examples."]},{"tag":"h3","children":["Translation"]},{"tag":"p","children":["Bobril-globalization package contains a ",{"tag":"emphasis","children":["t"]}," function with these arguments:"]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":["message for input text/pattern"]}]},{"tag":"li","children":[{"tag":"p","children":["optional params object defining the values for the message pattern"]}]},{"tag":"li","children":[{"tag":"p","children":["optional hint"]}]}]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\"Hello World!\"); // Hello World!"}},{"tag":"p","children":["Bobril-build takes all usages of t('some string') in code and replaces it by e.g. t(125) where 125 is the index of 'some string' constant in the array of localized strings. This array is placed in every localization file and corresponds to the array in the generated ",{"tag":"emphasis","children":["en-US.js."]}]},{"tag":"p","children":["To add a new localization definition just type the command:"]},{"tag":"pre","children":{"tag":"code","className":"bash","children":"bb t -a cs-CZ\nbb b -u 1\nbb"}},{"tag":"p","children":["The first command creates a new translation file ",{"tag":"emphasis","children":["translations/cs-CZ.json."]},". The second command adds the missing translations from the default generated ",{"tag":"emphasis","children":["en-US.js"]}," to ",{"tag":"emphasis","children":["cs-CZ.json"]}," translation definition. The build with the b parameter runs only once and then stops. Finally the last command runs build of the application with tracking changes in the code and with an output to the local web server. The content of the created ",{"tag":"emphasis","children":["json"]}," can be e.g.:"]},{"tag":"pre","children":{"tag":"code","className":"json","children":"[\"cs-CZ\", [\"My name is {a}!\", null, 1]]"}},{"tag":"p","children":["To add translations it can be modified to the following:"]},{"tag":"pre","children":{"tag":"code","className":"json","children":"[\"cs-CZ\", [\"My name is {a}!\", null, 1, \"Jmenuji se {a}!\"]]"}},{"tag":"p","children":["The specific parts of localization item represented as an array are:"]},{"tag":"ol","children":[{"tag":"li","children":[{"tag":"p","children":["Message - \"Hello World\""]}]},{"tag":"li","children":[{"tag":"p","children":["Translation help (third optional parameter of t function) - null =not used in t function"]}]},{"tag":"li","children":[{"tag":"p","children":["Indicator of parameters inside of message - 0 = no parameter"]}]},{"tag":"li","children":[{"tag":"p","children":["The translated message - \"Ahoj světe\""]}]}]},{"tag":"p","children":["Parts 1-3 compose the translation key. You can see the json definition example in the attached sample."]},{"tag":"p","children":["If you change the translation definition file, the bobril-build (bb command) has to be stopped and started again or some another change in the code has to be done to rebuild the application."]},{"tag":"p","children":["To see all possible build options use the -h parameter for bb command."]},{"tag":"p","children":["To change the locale, we can use the following code:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"setLocale(\"cs-CZ\");"}},{"tag":"p","children":["This code will change the locale and render the page with specific translations. To get the current locale, we can use a function getLocale."]},{"tag":"h3","children":["Basics"]},{"tag":"p","children":["We can simply add placeholders to use variables in our text patterns:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\"My name is {a}!\", { a: \"Tomas\" }); // My name is Tomas!"}},{"tag":"h4","children":["Ordinal"]},{"tag":"p","children":["To set localized ordinal, use the selectordinal pattern:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\n  \"You are in {floor, selectordinal, =0{ground} one{#st} two{#nd} few{#rd} other{#th}} floor\",\n  { floor: 2 }\n);\n// you are in 2nd floor"}},{"tag":"p","children":["The # character is replaced by the floor property in the params object."]},{"tag":"h4","children":["Plural"]},{"tag":"p","children":["The similar plural pattern is used to define localized plurals:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\"here {floor, plural, =0{is no floor} =1{is # floor} other{are # floors}}\", {\n  floor: 2\n});\n// here are 2 floors"}},{"tag":"h4","children":["Select"]},{"tag":"p","children":["To select a specific value according to some input string, we can use the select pattern:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\"famous {gender, select, female {woman} male {man} other {person}}\", {\n  gender: \"female\"\n});\n// famous woman"}},{"tag":"h4","children":["Number"]},{"tag":"p","children":["We can use a number pattern to keep numbers in culture specific formatting or to define our own format:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\"{arg, number}\", { arg: 1.234 }); // 1.234 in en\nt(\"{arg, number, custom, format:{0.0000}}\", { arg: 1.234 }); // 1.2340 - in en"}},{"tag":"h4","children":["Date and Time"]},{"tag":"p","children":["The date and time patterns work the same way and can be used in the following way:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\"{a, date, lll}\", { a: new Date(2000, 0, 2) }); // Jan 2, 2000 12:00 AM - in en\nt(\"{a, date, custom, format:{DD MM}}\", { a: new Date(2000, 0, 2) }); // 02 01 - in en\nt(\"{a, date, custom, format:{{myFormat}} }\", {\n  a: new Date(2000, 0, 2),\n  myFormat: \"ddd\"\n}); // Sun - in en"}},{"tag":"p","children":["The specific format definitions can be found in the ",{"tag":"a","attrs":{"href":"http://momentjs.com/docs/#/displaying/format/","title":""},"children":["Moment.js documentation."]}]},{"tag":"p","children":["It can also be defined in a calendar format:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\"{a, time, calendar}\", { a: Date.now() + 24 * 60 * 60 * 1000 }); // Tomorrow at 4:27 PM - in en"}},{"tag":"p","children":["or as a relative from now:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"t(\"{a, time, relative}\", { a: Date.now() - 100000 }); // 2 minutes ago - in en"}},{"tag":"p","children":["For more examples ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppGlobalization","title":""},"children":["download the full sample"]},"."]},{"tag":"h4","children":["Just Formatting"]},{"tag":"p","children":["If you only want to do the formatting of a text without a translation, just replace the t function by the f function."]},{"tag":"p","children":["It will only take care of culture specific formatting."]}]},{"tag":"div","children":[{"tag":"/","children":"<h2 id=\"menu-routing\">Routing</h2>\n[//]: # \"bobrilComIgnoreStart\""},{"tag":"h1","children":["Bobril - Routing"]},{"tag":"div"},{"tag":"p","children":[{"tag":"b","children":[{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppRouting","title":""},"children":["Download sample"]}]}]},{"tag":"div"},{"tag":"p","children":["In this article, we will learn how to handle routes definition by bobril embedded routing mechanism."]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["Bobril - I - Getting Started"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/02_bobril-bobflux.md","title":""},"children":["Bobril - II - Bobflux Application Architecture"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/03_bobril-localizations.md","title":""},"children":["Bobril - III - Localizations and Formatting"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/04_bobril-routing.md","title":""},"children":["Bobril - IV - Routing"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/05_bobril-bobril-build.md","title":""},"children":["Bobril - V - Bobril-build"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/06_bobril-bobx.md","title":""},"children":["Bobril - VI - BobX Application Store Management"]}]}]}]},{"tag":"div"},{"tag":"h3","children":["Background"]},{"tag":"p","children":["Bobril is a component-oriented framework written by Boris Letocha (software architect and developer in GMC Software Technology). For more information, ",{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["see the first article"]},"."]},{"tag":"h3","children":["Using the Code"]},{"tag":"h4","children":["Preparing Environment"]},{"tag":"p","children":["At first, we need to have prepared ",{"tag":"emphasis","children":["bobril-build"]}," on computer. Follow the steps in ",{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["first article"]}," to perform bobril-build installation."]},{"tag":"p","children":["Now you can start a new project again or use a predefined skeleton simpleApp from ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/Bobris/bobril-build/tree/master/examples/simpleApp","title":""},"children":["bobril-build github repository"]},"."]},{"tag":"p","children":["Following example will use it. To get final code ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppRouting","title":""},"children":["download the full sample"]},"."]},{"tag":"h4","children":["Defining Routes"]},{"tag":"p","children":["Bobril has few methods for defining the application route tree:"]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":["b.route - defines a route url, name, handler and a list of sub-routes"]}]},{"tag":"li","children":[{"tag":"p","children":["b.routes - registers routes to the application and calls b.init"]}]},{"tag":"li","children":[{"tag":"p","children":["b.routeDefault - defines the default route if no sub-route is specified in the current url"]}]}]},{"tag":"p","children":["Example of the route definition in ",{"tag":"emphasis","children":["app.ts"]},":"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport { mainPage } from \"./page\";\nimport { pageOne } from \"./pages/pageOne\";\nimport { pageTwo } from \"./pages/pageTwo\";\n\nb.routes(\n  b.route({ handler: mainPage }, [\n    b.route({ url: \"/one\", name: \"one\", handler: pageOne }),\n    b.route({ url: \"/two/:text?\", name: \"two\", handler: pageTwo }),\n    b.routeDefault({ handler: pageOne })\n  ])\n);"}},{"tag":"p","children":["The whole application will be handled by a handler mainPage with sub-routes one and two on urls ",{"tag":"emphasis","children":["'/one'"]}," and ",{"tag":"emphasis","children":["'/two'"]}," handled by handlers pageOne and pageTwo."]},{"tag":"p","children":["The default handler pageOne will be used when no sub-route is specified. The url for page two contains a parameter specification after a second slash. It is defined by a colon and a name of the parameter. The question mark defines the parameter as optional. Route parameters can then be found in the handler's context at ctx.data.routeParams."]},{"tag":"h4","children":["Handling Routes in Pages"]},{"tag":"p","children":["Now, we need to define the mainPage to render some own content and the visual content of the active sub-route. To do this, we will use a function provided in component's ctx.data.activeRouteHandler, so we can change the code of ",{"tag":"emphasis","children":["page.ts"]}," as the following:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\n\nexport const mainPage = b.createComponent({\n  render(_ctx: b.IBobrilCtx, me: b.IBobrilNode): void {\n    me.children = [\n      tag(\"h1\", \"Routing example\"),\n      tag(\"hr\"),\n      tag(\"div\", me.data.activeRouteHandler())\n    ];\n  }\n});"}},{"tag":"p","children":["This code will render a header, a line and the visual content of current active sub-route."]},{"tag":"p","children":["Now, we need to define sub-pages and transitions between these pages. Bobril offers the following functions and interface for these purposes:"]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":["b.IRouteTransition - interface for a transition definition (target name, parameters etc.)"]}]},{"tag":"li","children":[{"tag":"p","children":["b.createRedirectReplace - creates IRouteTransition object for redirect without saving history"]}]},{"tag":"li","children":[{"tag":"p","children":["b.createRedirectPush - creates IRouteTransition object for redirect with saving history"]}]},{"tag":"li","children":[{"tag":"p","children":["b.runTransition - runs a transition according to an input IRouteTransition object"]}]},{"tag":"li","children":[{"tag":"p","children":["b.link - changes an input IBobrilNode to a link to the route of a specified name and with specified optional params"]}]}]},{"tag":"p","children":["Example of the redirect definition from the page one to the page two in ",{"tag":"emphasis","children":["pages/pageOne.ts"]},":"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport { textbox } from \"../components/textbox\";\nimport { button } from \"../components/button\";\n\nlet value = \"\";\n\nexport const pageOne = b.createComponent({\n  render(ctx: b.IBobrilCtx, me: b.IBobrilNode): void {\n    me.children = [\n      textbox({\n        value,\n        onChange: newVal => {\n          value = newVal;\n          b.invalidate(ctx);\n        }\n      }),\n      button({\n        title: \"Confirm\",\n        onClick: () => {\n          b.runTransition(b.createRedirectPush(\"two\", { text: value }));\n          return true;\n        }\n      })\n    ];\n  }\n});"}},{"tag":"p","children":["The code in a button's onClick callback creates and runs a transition to the page two with an object defining the value of a text parameter."]},{"tag":"p","children":["The transition above has to be handled by the pageTwo handler defined in ",{"tag":"emphasis","children":["pages/pageTwo.ts"]},":"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport { tag } from \"../helper\";\nimport { loggedIn } from \"../page\";\n\nexport interface IData {\n  routeParams: { text?: string };\n}\n\nexport interface ICtx extends b.IBobrilCtx {\n  data: IData;\n}\n\nexport const pageTwo = b.createComponent<IData>({\n    render(ctx: ICtx, me: b.IBobrilNode): void {\n      const value = (ctx.data.routeParams.text || \"\").trim();\n      me.children = [\n        tag(\"p\", \"Your text: \" + (!!value ? value : \"nothing\")),\n        b.link(tag(\"a\", \"Go Home\"), \"one\")\n      ];\n    }\n  };"}},{"tag":"p","children":["The page receives the text parameter value in its ctx.data.routeParams.text so we can specify the context and data interfaces and use text in the render function of a page component. It also defines a link node to the page one by function b.link."]},{"tag":"h4","children":["Transition Availability"]},{"tag":"p","children":["There are some cases when we need to manage whether a current page on a current route is available or whether we can leave the current page. For these purposes, we can use the following static functions of IBobrilComponent:"]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":["canActivate - It can stop the current transition in a target handler by returning false or redirect to the new specified transition"]}]},{"tag":"li","children":[{"tag":"p","children":["canDeactivate - Can stop the current transition in the a source handler by returning false or redirect to the new specified transition"]}]}]},{"tag":"p","children":["So for example, we can handle leaving the page one with empty value of a textbox by adding canDeactivate function definition to the page one component definition in ",{"tag":"emphasis","children":["pages/pageOne.ts"]},":"]},{"tag":"pre","children":{"tag":"code","className":"javascript  canDeactivate() {","children":"    return !!value.trim() || confirm(\"The textbox is empty. Are you sure?\");\n  }"}},{"tag":"p","children":["or handle the not logged user on accessing the page two by adding canActivate function definition to the page two component definition in ",{"tag":"emphasis","children":["pages/pageTwo.ts"]},":"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"  canActivate() {\n    if (loggedIn) return true;\n    alert(\"You are not logged in!\");\n    return b.createRedirectReplace(\"one\");\n  },"}},{"tag":"p","children":[{"tag":"b","children":["Note"]},": The loggedIn variable is declared and set in mainPage and imported to the pageTwo. See the ",{"tag":"emphasis","children":["page.ts"]}," in the attached ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppRouting","title":""},"children":["full sample"]},"."]},{"tag":"h3","children":["Summary"]},{"tag":"p","children":["As you can see, the bobril framework contains really simple routing mechanism able to fulfill all standard requirements."]},{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleAppRouting","title":""},"children":["Download the full sample"]}," for the whole application with all the mentioned functions."]}]},{"tag":"div","children":[{"tag":"/","children":"<h2 id=\"menu-bobril-build\">Bobril Build</h2>\n[//]: # \"bobrilComIgnoreStart\""},{"tag":"h1","children":["Bobril-build"]},{"tag":"div"},{"tag":"h3","children":["Introduction"]},{"tag":"div"},{"tag":"p","children":["In previous articles we were using some basic operations from bobril-build. This article describes bobril-build's possibilities in more detail."]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["Bobril - I - Getting Started"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/02_bobril-bobflux.md","title":""},"children":["Bobril - II - Bobflux Application Architecture"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/03_bobril-localizations.md","title":""},"children":["Bobril - III - Localizations and Formatting"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/04_bobril-routing.md","title":""},"children":["Bobril - IV - Routing"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/05_bobril-bobril-build.md","title":""},"children":["Bobril - V - Bobril-build"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/06_bobril-bobx.md","title":""},"children":["Bobril - VI - BobX Application Store Management"]}]}]}]},{"tag":"div"},{"tag":"p","children":["Bobril-build is .NET Core based build system created for building single-page applications written in Typescript and with lot of optimizations for bobril and bobril-g11n. It is designed for bobril applications but it can be used for all Typescript applications in general. It is written by Boris Letocha (software architect and developer in GMC Software Technology). Package ",{"tag":"b","children":["bobril-build"]}," is just a wrapper which downloads specific version of builder (latest if not defined) and runs a build of your application."]},{"tag":"p","children":["Bobril-build should be installed globally by command:"]},{"tag":"pre","children":{"tag":"code","className":"bash","children":"npm i bobril-build -g"}},{"tag":"p","children":["It requires node.js >= 8.x.x and npm >=5.x.x."]},{"tag":"p","children":["It can use optionally yarn package manager. If yarn is not available, npm is used instead."]},{"tag":"p","children":["Bobril-build does lot for the best Developer Experience. In general, to start development you need only to install global ",{"tag":"b","children":["bobril-build"]}," (only once), initialize npm package, create ",{"tag":"emphasis","children":["index.ts"]}," file and start the bb command. It starts self-hosting server with distribution stored in memory (good for SSD drives), watches files for changes, runs tests, provides sourcemaps and so on."]},{"tag":"p","children":["But bobril-build offers much more. It can perform:"]},{"tag":"ol","children":[{"tag":"li","children":[{"tag":"p","children":["Run self-hosting server for distribution. It serves application from main file (",{"tag":"emphasis","children":["index.ts"]}," by default) or the example (",{"tag":"emphasis","children":["example.ts"]}," by default) files when it is provided. Example is mainly used for components."]}]},{"tag":"li","children":[{"tag":"p","children":["Watch for changes"]}]},{"tag":"li","children":[{"tag":"p","children":["Run tests and optionally generate JUnit XMLs with results for additional integration on build server"]}]},{"tag":"li","children":[{"tag":"p","children":["Compile typescript"]}]},{"tag":"li","children":[{"tag":"p","children":["Install external dependencies"]}]},{"tag":"li","children":[{"tag":"p","children":["Resolve internal/external dependencies (imports)"]}]},{"tag":"li","children":[{"tag":"p","children":["Transpilation"]}]},{"tag":"li","children":[{"tag":"p","children":["Manage translations"]}]},{"tag":"li","children":[{"tag":"p","children":["Minification"]}]},{"tag":"li","children":[{"tag":"p","children":["Create sprites"]}]},{"tag":"li","children":[{"tag":"p","children":["Manage assets"]}]},{"tag":"li","children":[{"tag":"p","children":["Manage and run external bobril plugins"]}]}]},{"tag":"h3","children":["Basic commands"]},{"tag":"p","children":["bb - Runs build in interactive mode. Distribution is available on self-hosting server on ",{"tag":"a","attrs":{"href":"http://localhost:8080","title":""},"children":["http://localhost:8080"]},". Files are served from memory. Build information are available on ",{"tag":"a","attrs":{"href":"http://localhost:8080/bb","title":""},"children":["http://localhost:8080/bb"]},". It also runs tests. To start another testing agent point any browser to ",{"tag":"a","attrs":{"href":"http://localhost:8080/bb/test","title":""},"children":["http://localhost:8080/bb/test"]},". If you want to debug tests open ",{"tag":"a","attrs":{"href":"http://localhost:8080/test.html","title":""},"children":["http://localhost:8080/test.html"]},", any failed asserts throws exceptions so it is easy to stop on them."]},{"tag":"p","children":["bb -h, --help - Basic bobril-build help"]},{"tag":"p","children":["bb ",{"tag":"/","children":"<command>"}," -h - Help for specific command"]},{"tag":"h3","children":["Tests"]},{"tag":"p","children":["Bobril-build runs test files with suffix ",{"tag":"emphasis","children":["spec.ts"]},". It automatically provides jasmine.d.ts to these spec files."]},{"tag":"p","children":["bb test ",{"tag":"div","children":["options"]}," - Just runs test once in chrome."]},{"tag":"h4","children":["Options"]},{"tag":"p","children":["-o, --out ",{"tag":"/","children":"<name>"}," - Defines filename for test result as JUnit XML. You can use such file for integration on your build server such Jenkins"]},{"tag":"h3","children":["Translations"]},{"tag":"p","children":["Bobril-build provides set of tools for managing translations."]},{"tag":"p","children":["bb translation|t ",{"tag":"div","children":["options"]}," - Translations management."]},{"tag":"h4","children":["Options"]},{"tag":"p","children":["-a, --addlang ",{"tag":"/","children":"<lang>"},"    - Adds new language definition to translations folder."]},{"tag":"p","children":["-r, --removelang ",{"tag":"/","children":"<lang>"}," - Removes language."]},{"tag":"p","children":["---e, --export ",{"tag":"/","children":"<fileName>"}," - Export untranslated languages to specific file."]},{"tag":"p","children":["Mainly used for translation agencies. Use with -l option. Each item is listed in format"]},{"tag":"pre","children":{"tag":"code","className":"json","children":"S:Original message\nI:Hint\nT:Translated message"}},{"tag":"p","children":["-i, --import ",{"tag":"/","children":"<fileName>"}," - Imports translated languages from specific file. File name must be in format language-Name.txt"]},{"tag":"p","children":["-p, --specificPath ",{"tag":"/","children":"<path>"}," - Specifies path for export from / import to."]},{"tag":"p","children":["-l, --lang ",{"tag":"/","children":"<lang>"}," - Specifies language for export."]},{"tag":"p","children":["-u, --union <sourcePath1,sourcePath2,destinationPath>  - Makes union from paths."]},{"tag":"p","children":["-s, --subtract <sourcePath1,sourcePath2,destinationPath> - Makes subtract of paths."]},{"tag":"p","children":["To update items in .json file in translations according to your code you must use command"]},{"tag":"p","children":["bb b -u 1 (more in chapter ",{"tag":"emphasis","children":["Build commands"]},")"]},{"tag":"h3","children":["Build commands"]},{"tag":"p","children":["Bobril builds allows to manage build process by parameters."]},{"tag":"p","children":["bb build|b ",{"tag":"div","children":["options"]}," Full build including all mentioned operations. Builds just once, serves generated files to dist folder and stops."]},{"tag":"h4","children":["Options"]},{"tag":"p","children":["-?|-h|-help|--help Help"]},{"tag":"p","children":["-d|--dir ",{"tag":"/","children":"<value>"}," ",{"tag":"div","children":["default value: <./dist>"]}," Defines where to put build result."]},{"tag":"p","children":["-f|--fast <true|True|1|t|T|y|Y|false|False|0|f|F|n|N> ",{"tag":"div","children":["default value: ",{"tag":"/","children":"<False>"}]}," Quick debuggable bundling."]},{"tag":"p","children":["It simply does not minify."]},{"tag":"p","children":["-c|--compress <true|True|1|t|T|y|Y|false|False|0|f|F|n|N> ",{"tag":"div","children":["default value: ",{"tag":"/","children":"<True>"}]}," Remove dead code."]},{"tag":"p","children":["-m|--mangle <true|True|1|t|T|y|Y|false|False|0|f|F|n|N> ",{"tag":"div","children":["default value: ",{"tag":"/","children":"<True>"}]}," Minify names."]},{"tag":"p","children":["-b|--beautify <true|True|1|t|T|y|Y|false|False|0|f|F|n|N> ",{"tag":"div","children":["default value: ",{"tag":"/","children":"<False>"}]}," Readable formatting."]},{"tag":"p","children":["-s|--style <0|1|2> Override styleDef className preservation level."]},{"tag":"p","children":["-p|--sprite <true|True|1|t|T|y|Y|false|False|0|f|F|n|N> ",{"tag":"div","children":["default value: ",{"tag":"/","children":"<True>"}]}," enable/disable creation of sprites. It searches for usage of ",{"tag":"code","className":"","children":"b.sprite"}," in the code."]},{"tag":"p","children":["-l|--localize <true|True|1|t|T|y|Y|false|False|0|f|F|n|N> Create localized resources (default: auto-detect)."]},{"tag":"p","children":["-u|--updateTranslations <true|True|1|t|T|y|Y|false|False|0|f|F|n|N> ",{"tag":"div","children":["default value: ",{"tag":"/","children":"<False>"}]}," Update translations. It searches for usage of t function from ",{"tag":"b","children":["bobril-g11n"]}," in the code and updates ",{"tag":"emphasis","children":["language.json"]}," files in translations folder in format:"]},{"tag":"pre","children":{"tag":"code","className":"json","children":"[\"cs-CZ\", [\"Original {text}!\", null, 1, \"Translated {text}!\"]]"}},{"tag":"p","children":["-v|--versiondir ",{"tag":"/","children":"<value>"}," Store all resources except index.html in this directory. It stores generated files to specific folder and links ",{"tag":"emphasis","children":["index.html"]}," into these files. Used for preventing cache."]},{"tag":"p","children":["-n|--noupdate Do not install dependencies at start."]},{"tag":"p","children":["--verbose Enable spamming console output."]},{"tag":"p","children":["--nocache (Forbid using Build Cache."]},{"tag":"/","children":"<!--### Plugins\n\nBobril-build allows you to use external plugins (e.g. [bb-tslint-plugin](https://github.com/saryn/bb-tslint-plugin)) which runs in the final part of bobril-build process. To manage such plugins use following commands:\n\nbb plugins [options]\n\n#### Options\n\n-l, --list - Lists all installed plugins.\n\n-i, --install <pluginName> - Installs new plugin.\n\n-u, --uninstall <pluginName> - Uninstalls specific plugin.\n\n-s, --link - Links plugin to workspace.\n-->"},{"tag":"h3","children":["Configuration"]},{"tag":"p","children":["Bobril-build can be configured by options defined in ",{"tag":"emphasis","children":["package.json"]},":"]},{"tag":"pre","children":{"tag":"code","className":"json","children":"{\n  \"typescript\": {\n    \"main\": \"pathToMain.ts\" // index.ts by default\n  },\n  \"bobril\": {\n    \"bbVersion\": \"0.45.0\", // version of bobril-build use for building\n    \"tsVersion\": \"3.0.1\", // version of TS use for build\n    \"dir\": \"name of directory where to place release default is dist\",\n    \"resourcesAreRelativeToProjectDir\": false, // this is default\n    \"additionalResourcesDirectory\": \"path to folder with files, these files will be added to dist\",\n    \"example\": \"pathToExample.ts\", // sample application entry point - if main is index.ts than example.ts is searched for default\n    \"title\": \"index.html Title\",\n    \"head\": \"additional tags to head section of index.hml, e.g. <meta>\",\n    \"compilerOptions\": {\n      \"declaration\": true,\n      \"strict\": true,\n      \"noUnusedLocals\": true,\n      \"noUnusedParameters\": true,\n      \"noImplicitReturns\": true,\n      \"noFallthroughCasesInSwitch\": true\n    },\n    \"prefixStyleDefs\": undefined, // prefix for generated styles\n    \"constantOverrides\": {\n      \"module_name\": {\n        \"export_name\": \"New value, it supports also number and boolean values\" // allows to override constants exported from npm packages\n      }\n    },\n    \"dependencies\": \"install\", // \"disable\" = no yarn at start \"install\" = yarn install, \"upgrade\" = yarn upgrade\n    \"plugins\": {\n      \"pluginName\": {\n        \"configKey\": \"configValue\" // provides configuration for installed bobril plugins\n      }\n    }\n  }\n}"}},{"tag":"h3","children":["Debug mode"]},{"tag":"p","children":["You can run some code conditionally based on _DEBUG _flag directly in the code."]},{"tag":"p","children":["Just add following code to your module:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"declare let DEBUG: boolean;"}},{"tag":"p","children":["and bobril-build will assign such variable with value saying you are in debug mode (bb) or in production code (bb b)."]},{"tag":"h2","children":["GitHub"]},{"tag":"p","children":["You can find more info or source codes on ",{"tag":"a","attrs":{"href":"https://github.com/bobril/bbcore","title":""},"children":["bbcore github pages"]},"."]}]},{"tag":"div","children":[{"tag":"/","children":"<h2 id=\"menu-bobx\">BobX</h2>\n[//]: # \"bobrilComIgnoreStart\""},{"tag":"h1","children":["BobX Application Store Management"]},{"tag":"div"},{"tag":"p","children":[{"tag":"b","children":[{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleBobX","title":""},"children":["Download sample"]}]}]},{"tag":"div"},{"tag":"h3","children":["Introduction"]},{"tag":"p","children":["In the ",{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/02_bobril-bobflux.md","title":""},"children":["second article"]},", we have created a simple ToDo application using bobflux framework. In this article, we will learn how to create such application in an easier way using the new framework ",{"tag":"a","attrs":{"href":"https://github.com/bobril/bobx","title":""},"children":["BobX"]},"."]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["Bobril - I - Getting Started"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/02_bobril-bobflux.md","title":""},"children":["Bobril - II - Bobflux Application Architecture"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/03_bobril-localizations.md","title":""},"children":["Bobril - III - Localizations and Formatting"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/04_bobril-routing.md","title":""},"children":["Bobril - IV - Routing"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/05_bobril-bobril-build.md","title":""},"children":["Bobril - V - Bobril-build"]}]}]},{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/06_bobril-bobx.md","title":""},"children":["Bobril - VI - BobX Application Store Management"]}]}]}]},{"tag":"div"},{"tag":"h3","children":["Background"]},{"tag":"p","children":["BobX is MobX like library for managing application stores created by Boris Letocha (Quadient). It is written in TypeScript and fits the bobril application needs. It uses the observer pattern where stores are observable subjects and bobril components are observers.\n",{"tag":"img","attrs":{"src":"./images/bobx.png","title":"","alt":""}}]},{"tag":"h3","children":["Let's Start"]},{"tag":"p","children":["We will create a simple TODO application again. At first, we need to have prepared ",{"tag":"emphasis","children":["bobril-build"]}," on computer. Follow the steps in the ",{"tag":"a","attrs":{"href":"https://github.com/keeema/bobril-samples/blob/master/articles/01_bobril-getting-started.md","title":""},"children":["first article"]}," to perform bobril-build installation."]},{"tag":"p","children":["Now you can start a new project again or use a predefined skeleton simpleApp from ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/Bobris/bobril-build/tree/master/examples/simpleApp","title":""},"children":["bobril-build github repository"]},"."]},{"tag":"p","children":["The following example will use it. To get final code including all needed components, ",{"tag":"a","attrs":{"href":"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/keeema/bobril-samples/tree/master/sampleBobX","title":""},"children":["download the full sample"]},"."]},{"tag":"pre","children":{"tag":"code","className":"","children":"### Add BobX to Application\n\nRun the following commands in the root of application folder:\n``` bash\nnpm i\nnpm i bobx --save\nbb"}},{"tag":"h3","children":["Store"]},{"tag":"p","children":["At first, we will create a simple bobx store containing the same data as the bobflux variant. This store will be in file ",{"tag":"emphasis","children":["store.ts:"]}]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import { observable } from \"bobx\";\n\nexport class TodoStore {\n  @observable\n  todoName: string = \"\";\n\n  @observable\n  private _todos: string[] = [];\n\n  get todos(): string[] {\n    return this._todos;\n  }\n\n  addTodo(): void {\n    if (this.todoName.trim().length === 0) return;\n    this._todos.push(this.todoName.trim());\n    this.todoName = \"\";\n  }\n}\n\nexport const todoStore = new TodoStore();"}},{"tag":"p","children":["In the code above, you can see used an @observable decorator on fields todoName and ","_","todos. This decorator creates getters/setters with the tracking functionality on these fields. It will cause tracking of these fields. When such field is used in any rendering function in node of bobril component, then function b.invalidate(ctx) will be called automatically with particular context on every change of this field."]},{"tag":"h3","children":["Composing the Page with BobX"]},{"tag":"p","children":["Now, we have everything prepared to be used on the page of the todo application. The ",{"tag":"emphasis","children":["src/mainPage.ts"]}," will look like this:"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"import * as b from \"bobril\";\nimport { button } from \"./components/button\";\nimport { textbox } from \"./components/textbox\";\nimport { p } from \"./components/paragraph\";\nimport { h1 } from \"./components/header\";\nimport { todoStore } from \"./store\";\n\nexport const mainPage = b.createComponent({\n  render(_ctx: b.IBobrilCtx, me: b.IBobrilNode): void {\n    me.children = [\n      h1({}, \"TODO\"),\n      p({}, [\n        textbox({\n          value: todoStore.todoName,\n          onChange: newValue => (todoStore.todoName = newValue)\n        }),\n        button({ title: \"ADD\", onClick: () => todoStore.addTodo() })\n      ]),\n      todoStore.todos.map(item => p({}, item)),\n      p({}, `Count: ${todoStore.todos.length}`)\n    ];\n  }\n});\n\nexport default mainPage;"}},{"tag":"p","children":["The components definition is not the subject of this article, so you can use definitions in the attached source code."]},{"tag":"p","children":["You can see that a page imports the store directly from store module."]},{"tag":"p","children":["The textbox and button components use the actions defined on store in their onChange and onClick callbacks so the user interactions from view initiate the action calls. And finally, in the end of the render function is a mapped array of todos to 'p' tags with todo names."]},{"tag":"p","children":["Now, we are able to open the application in a browser on ",{"tag":"a","attrs":{"href":"http://localhost:8080/","title":""},"children":["http://localhost:8080"]}," and see how it works."]},{"tag":"p","children":["The ",{"tag":"emphasis","children":["Global store"]}," is one, but not the only one way how to define and use stores.",{"tag":"br"},"The ",{"tag":"emphasis","children":["Page store"]}," can be instantiated directly in the init method of component and given to its sub-components through data.",{"tag":"br"},"The ",{"tag":"emphasis","children":["Context store"]}," can be created as the component context for the component's inner data which you want to track."]},{"tag":"p","children":["Example of ",{"tag":"emphasis","children":["Context store"]},":"]},{"tag":"pre","children":{"tag":"code","className":"javascript","children":"class CtxStore extends b.BobrilCtx<IData>; {\n  @observable someProperty: string = \"\";\n\n  constructor(data: IData, me: b.IBobrilCacheNode) {\n    super(data, me);\n      ...\n  }\n}\n\nexport const myComponent = b.createComponent<IData>;({\n  ctxClass: CtxStore,\n  render(ctx: CtxStore) {\n    ...\n  }\n})"}},{"tag":"h3","children":["Store Optimizations"]},{"tag":"p","children":["There is not only the pure observable function to define observable properties. Sometimes, you don’t want to track all properties of objects so let’s take a look at other possible ways:"]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":["observable.deep - The default observable way. It decorates all defined properties of given objects to be observable (tracked) recursively. The recursion stops when the property contains an object with defined prototype."]}]},{"tag":"li","children":[{"tag":"p","children":["observable.ref - Only the reference of object is tracked. No change of inner properties will trigger rendering."]}]},{"tag":"li","children":[{"tag":"p","children":["observable.shallow - This variant will track the reference of given object, its properties but nothing more. So for example, the array will be tracked for its reference, its content, but not for the content of its items."]}]},{"tag":"li","children":[{"tag":"p","children":["observable.map - You can use this function to create a dynamic keyed observable map."]}]},{"tag":"li","children":[{"tag":"p","children":["computed - You can use this decorator on any getter of a class property to declaratively created computed properties. Computed values are values that can be derived from the existing store or other computed values."]}]}]},{"tag":"p","children":["To get more information, see the project github pages:"]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://github.com/bobril/bobx","title":""},"children":["https://github.com/bobril/bobx"]}]}]}]},{"tag":"p","children":["or MobX documentation pages:"]},{"tag":"ul","children":[{"tag":"li","children":[{"tag":"p","children":[{"tag":"a","attrs":{"href":"https://mobx.js.org/","title":""},"children":["https://mobx.js.org"]}]}]}]}]}],
                    style: {

                        marginRight: '90px',
                        padding: '60px 330px 120px 90px'
                    }
                }
            ]
        }
    }